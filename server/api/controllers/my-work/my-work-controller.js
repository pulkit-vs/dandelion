
/**
 * @class MyWorkController
 * @extends {BaseController}
 * 
 * @description
 *    API Controller for Your Work
 * 
 * @author
 *  Nikhil Aggarwal, VectoScalar
 * 
 */
const DbQueries = require('../common/db-queries');
const BaseController = require('../common/base-controller'),
  logger = require('../common/logger')

class MyWorkController extends BaseController {
  constructor() {
    super();
  }

  /**
   * @name workedOnProjects 
   * @memberof MyWorkController
   * 
   * @description
   *  - get list of projects you have ever worked on
   * 
   * @param {*} userId - User AutoGenerated Unique Id 
   * 
   * @returns - Json Array of projects 
   *    {
   *        projectId, projectName, lastWorkedOnDate
   *    }
   * 
   */
  async workedOnProjects(userId) {

  }

  /**
   * @name viewedProjects
   * @memberof MyWorkController
   * 
   * @description
   *   - get list of projects you have ever viewed/browsed
   * 
   * @param {*} userId - User AutoGenerated Unique Id 
   * 
   * @returns - Json Array of projects 
   *    {
   *        projectId, projectName, lastViewedDate
   *    }
   * 
   */
  async viewedProjects(userId) {

  }


  /**
   * @name assignedToMeTickets
   * @memberof MyWorkController
   * 
   * @description
   *   - get list of all tickets currently assigned to for all projects
   * 
   * @param {*} userId - User AutoGenerated Unique Id 
   * 
   * @returns - Json Array of tickets
   *    {
   *        TicketId, TicketTitle, ProjectKey, CurrentStatus, 
   *    }
   * 
   */
  async assignedToMeTickets(req, res) {
    const projectId = req.params.projectId;
    const employeeId = req.query.employeeId;
    logger.info('projectId:', projectId);
    if (projectId) {
      try {
        const sql = DbQueries.ASSIGN_TO_ME_TICKETS_QUERY(employeeId, projectId);
        const response = await super.executeQueryWithBindParams(sql.query, sql.bindParams);
        logger.info(`MyWorkController: assignedToMeTickets : query response : ${response}`);
        const message = (response.length) ? "Issues Fetched Successfully " : `No Issues to show`;
        if (Array.isArray(response) && response.length > 0) {
          res.status(200);
          res.json({
            message: message,
            db_response: response
          });
        } else {
          res.status(200);
          res.json({
            message: message,
            db_response: []
          });
        }

      } catch (error) {
        logger.error(`MyWorkController: assignedToMeTickets: Error while fetching the issues Info: `, error);
        res.statusMessage = error;
        res.status(400).end();
      }
    } else {
      res.status(200);
      res.json({ message: `MyWorkController : detail: Issues not found for projectId : ${projectId} ` });
    }
  }

  /**
   * @name starredProjects
   * @memberof MyWorkController
   * 
   * @description
   *  - get list of all items which are star marked by me.
   *    these items may be fav-filter, fav-dashboard, fav-project, fav-ticket and etc
   *
   * @param {*} userId - User AutoGenerated Unique Id 
   * 
   * @returns - Json Array of favorites 
   *    {
   *        type, title, keyReference, lastViewedDate
   *    }
   * 
   */
  async starredTickets(userId) {

  }



}

module.exports = MyWorkController;
